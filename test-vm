#!/usr/bin/env bash
# Author: Josiah Bull <josiah.bull7@gmail.com>
# This script will create a vm for testing purposes, then tear it down afterwards.
# This is especially useful for testing scripts. It will clone and start a vm, then tear it down afterwards.
# Example
# `./test-vm ubuntu`

# This function will check if a virtual machine exists by the provided name, returning a boolean
function check_exist() {
    __RES=$(virsh list --all)
    if [[ "$__RES" == *"$1"* ]]; then
        return 1
    else
        return 0
    fi
}

# Clone virtual machine 
function clone_virtual_machine() {
    virt-clone --auto-clone --replace --original $1 --name $2
}

# this function will attempt to start the provided virtual machine
function start_virtual_machine() {
    virsh start $1
}

# this function will attempt to forcibly stop a virtual machine
function stop_virtual_machine() {
    virsh destroy $1
}

# this function will attempt to undefine the provided virtual machine, it will only do so after a correct prompt however
function remove_virtual_machine() {
    virsh undefine $1 --managed-save --remove-all-storage
}

# when called, this function will display a prompt and await for user input to continue.
function wait_for_input() {
    read -n 5 -s -r -p "press any key 5 times to continue "
}

# ask for confirmation, will exit with code 0 on failure
confirm() {
    read -r -p "${1:-Are you sure? [y/N]} " response

    if [[ $response == "y" || $response == "Y" || $response == "yes" || $response == "Yes" ]]
    then
        return 1
    else
        return 0
    fi
}

NAME=""
if [ $1 = "ubuntu" ]; then
    NAME="ubuntu21.10"
elif [ $1 = "fedora" ]; then
    NAME="fedora-35"
elif [ $1 = "other" ]; then
    NAME="$2"
elif [ $1 = "" ]; then
    echo "please provide name of the virtual machine to clone as the first argument for this script"
else
    echo "Err: provided value ${1} is not recognised"
fi

check_exist "$NAME"
if [[ "$?" == "0" ]]; then
    echo "provided virtual machine `${NAME}` does not exist"
    exit 1 
fi

check_exist "${NAME}-clone"
if [[ "$?" == "1" ]]; then
    confirm "existing test machine exists, would you like to override it? [y/N]"

    if [[ "$?" == "1" ]]; then
        stop_virtual_machine "${NAME}-clone"
        remove_virtual_machine "${NAME}-clone"
        clone_virtual_machine $NAME "${NAME}-clone"
    fi

else
    clone_virtual_machine $NAME "${NAME}-clone"
fi

start_virtual_machine "${NAME}-clone"

echo "waiting 15s for system to start..."

sleep 15s

MAC_ADDR=$(virsh dumpxml ${NAME}-clone | grep "mac address" | awk -F\' '{print $2}')
IP_ADDR=$(arp -an | grep ${MAC_ADDR} | cut -d "(" -f2 | cut -d ")" -f1)

echo "test virtual machine created, ssh into it at ${IP_ADDR}"
echo "when testing has concluded, this script will destroy the testing machine"
wait_for_input

stop_virtual_machine "${NAME}-clone"

confirm "would you like to undefine the testing virtual machine? [y/N]"
if [[ "$?" == "1" ]]; then
    remove_virtual_machine "${NAME}-clone"
fi
